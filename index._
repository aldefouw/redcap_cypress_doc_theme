<% const handlePreserveConsecutiveUppercase = (decamelized, separator) => {
       // Lowercase all single uppercase characters. As we
       // want to preserve uppercase sequences, we cannot
       // simply lowercase the separated string at the end.
       // `data_For_USACounties` → `data_for_USACounties`
       decamelized = decamelized.replace(
           /((?<![\p{Uppercase_Letter}\d])[\p{Uppercase_Letter}\d](?![\p{Uppercase_Letter}\d]))/gu,
           $0 => $0.toUpperCase(),
       );

       // Remaining uppercase sequences will be separated from lowercase sequences.
       // `data_For_USACounties` → `data_for_USA_counties`
       return decamelized.replace(
           /(\p{Uppercase_Letter}+)(\p{Uppercase_Letter}\p{Lowercase_Letter}+)/gu,
           (_, $1, $2) => $1 + separator + $2.toUpperCase(),
       );
   };

  function decamelize(
       text,
       {
           separator = '_',
           preserveConsecutiveUppercase = false,
       } = {},
   ) {
       if (!(typeof text === 'string' && typeof separator === 'string')) {
           throw new TypeError(
               'The `text` and `separator` arguments should be of type `string`',
           );
       }

       // Checking the second character is done later on. Therefore process shorter strings here.
       if (text.length < 2) {
           return preserveConsecutiveUppercase ? text : text.toLowerCase();
       }

       const replacement = `$1${separator}$2`;

       // Split lowercase sequences followed by uppercase character.
       // `dataForUSACounties` → `data_For_USACounties`
       // `myURLstring → `my_URLstring`
       const decamelized = text.replace(
           /([\p{Lowercase_Letter}\d])(\p{Uppercase_Letter})/gu,
           replacement,
       );

       if (preserveConsecutiveUppercase) {
           return handlePreserveConsecutiveUppercase(decamelized, separator);
       }

       // Split multiple uppercase characters followed by one or more lowercase characters.
       // `my_URLstring` → `my_ur_lstring`
       return decamelized
           .replace(
               /(\p{Uppercase_Letter})(\p{Uppercase_Letter}\p{Lowercase_Letter}+)/gu,
               replacement,
           )
           .toLowerCase();
   } %>
<!doctype html>
<html lang="en">
<head>
  <meta charset='utf-8'>
  <title><%- config['project-name'] %> <%- config['project-version'] %> | Documentation</title><% if (config['project-description']) { %>
  <meta name='description' content='<%- config['project-description'] %>'><% } %>
  <meta name='viewport' content='width=device-width,initial-scale=1'>
  <link href='assets/bass.css' rel='stylesheet'>
  <link href='assets/style.css' rel='stylesheet'>
  <link href='assets/github.css' rel='stylesheet'>
  <link href='assets/split.css' rel='stylesheet'><% if (config['favicon']) { %>
  <link href='<%- config['favicon'] %>' rel='icon' ><% } %>
</head>
<body class='documentation m0'>
    <div class='flex'>
      <div id='split-left' class='overflow-auto fs0 height-viewport-100'>
        <div class='py1 px2'>
          <h3 class='mb0 no-anchor'><%- config['project-name'] %></h3>
          <div class='mb1'><code><%- config['project-version'] %></code></div>
          <input
            placeholder='Filter'
            id='filter-input'
            class='col12 block input'
            spellcheck='false'
            autocapitalize='off'
            autocorrect='off'
            type='text' />
          <div id='toc'>
            <ul class='list-reset h5 py1-ul'>
              <% var previous_kind = '' %>
              <% docs.forEach(function(doc) { %>
                <% var hasMembers = doc.members.static.length || doc.members.instance.length %>
                <li>
                <% if (doc.name !== previous_kind){ %>
                  <h2 class="mt1 mb1"><%- decamelize(doc.name, {separator: ' ', preserveConsecutiveUppercase: true}) %></h2>
                <% }%>

                <% doc.tags.forEach(function(tag) { %>
                   <% if(tag['title'] === 'example'){ %>
                   <a
                      href='#<%=slug(tag['description'])%>'
                      class="<% if (doc.kind === 'note') { %>h5 bold black caps<% } %><% if (hasMembers) { %> toggle-sibling<% } %>">
                         <%- tag['description'] %>
                      <% if (hasMembers) { %><span class='icon'>▸</span><% } %>
                    </a>
                   <% } %>
                <% }) %>

                <% previous_kind = doc.name %>

                <% if (hasMembers) { %>
                <div class='toggle-target display-none'>
                  <% if (doc.members.static && doc.members.static.length) { %>
                  <ul class='list-reset py1-ul pl1'>
                    <li class='h5'><span>Static members</span></li>
                    <% doc.members.static.forEach(function(member) { %>
                      <li><a
                        href='#<%=slug(member.namespace)%>'
                        class='regular pre-open'>
                        .<%- member.name %>
                      </a></li>
                    <% }) %>
                    </ul>
                  <% } %>
                  <% if (doc.members.instance && doc.members.instance.length) { %>
                    <ul class='list-reset py1-ul pl1'>
                      <li class='h5'><span>Instance members</span></li>
                      <% doc.members.instance.forEach(function(member) { %>
                      <li><a
                        href='#<%=slug(member.namespace)%>'
                        class='regular pre-open'>
                        #<%- member.name %>
                      </a></li>
                      <% }) %>
                    </ul>
                  <% } %>
                  <% if (doc.members.inner && doc.members.inner.length) { %>
                    <ul class='list-reset py1-ul pl1'>
                      <li class='h5'><span>Inner members</span></li>
                      <% doc.members.inner.forEach(function(member) { %>
                      <li><a
                        href='#<%=slug(member.namespace)%>'
                        class='regular pre-open'>
                        #<%- member.name %>
                      </a></li>
                      <% }) %>
                    </ul>
                  <% } %>
                  <% if (doc.members.events && doc.members.events.length) { %>
                    <ul class='list-reset py1-ul pl1'>
                      <li class='h5'>Events</li>
                      <% doc.members.events.forEach(function(member) { %>
                        <li><a
                          href='#<%=slug(member.namespace)%>'
                          class='regular pre-open'>
                          ⓔ <%- member.name %>
                        </a></li>
                      <% }) %>
                    </ul>
                  <% } %>
                </div>
                <% } %>
                </li>
              <% }) %>
            </ul>
          </div>
          <div class='mt1 h6 quiet'>
            <a href='https://documentation.js.org/reading-documentation.html'>Need help reading this?</a>
          </div>
        </div>
      </div>
      <div id='split-right' class='relative overflow-auto height-viewport-100'>
        <% var previous_section = '' %>

        <% docs.forEach(function(s) { %>
          <% if (s.kind === 'note' && !s.children) { %>
            <div class='keyline-top-not py2'><%=renderNote({ note: s })%></div>

          <% } else { %>

          <% if(previous_section.name !== s.name){ %>
          <h2 class='fl mt3 mb2' id='<%- slug(s.namespace) %>'><%- decamelize(s.name, {separator: ' ', preserveConsecutiveUppercase: true}) %></h3>
          <% } %>

          <%= renderSection({
            section: s,
            renderSection: renderSection,
            renderSectionList: renderSectionList,
            renderParamProperty: renderParamProperty
          }) %>

          <% previous_section = s %>

          <% } %>
        <% }) %>
      </div>
    </div>
  <script src='assets/anchor.js'></script>
  <script src='assets/split.js'></script>
  <script src='assets/site.js'></script>

</body>
</html>
